clear,close all, clc
addpath('Datos')
addpath('Funciones')
clear
load 'datos_biomarcadores_exp1';
X1 = datos;
Y1 = clases;
load 'datos_biomarcadores_exp2';
X2 = datos;
Y2 = clases;

%% a)
funcion_representa_muestras_clasificacion_binaria(X1,Y1)
funcion_representa_muestras_clasificacion_binaria(X2,Y2)

%% b) Vamos a definir el clasificador sobre las muestras del primer experimento

% Comprobamos que modelo de decisi√≥n usar (como solo hemos aprendido dos 
% clasificadores, suponemos que las muestras son equiprobables y las 
% matrices de covarianzas son parecidas o iguales)
disp('Numero de correlacion del primer experimento');
coeficientes1 = funcion_calcular_coeficiente_correlacion_XY(X1,Y1);

disp('Numero de correlacion del segundo experimento');
coeficientes2 = funcion_calcular_coeficiente_correlacion_XY(X2,Y2);

% Observamos que en el primer experimento es mejor usar MDE y en el segundo
% MDM

% comprobemos MDE con las dos muestras

[d1,d2,d12,coeficientes_d12] = funcion_calcula_funciones_decision_MDE_clasificacion_binaria(X1,Y1);
precision11 =  funcion_evalua_precision_clasificador(X1,Y1,d1,d2,d12);

[d1,d2,d12,coeficientes_d12] = funcion_calcula_funciones_decision_MDE_clasificacion_binaria(X2,Y2);
precision21 =  funcion_evalua_precision_clasificador(X2,Y2,d1,d2,d12);

% Se observa que usando MDE se obtienen uunos valores bastante buenos para
% los dos experimentos

% Comprobemos MDM

[d1,d2,d12,coeficientes_d12] = funcion_calcula_funciones_decision_MDM_clasificacion_binaria(X1,Y1);
precision12 =  funcion_evalua_precision_clasificador(X1,Y1,d1,d2,d12);



[d1,d2,d12,coeficientes_d12] = funcion_calcula_funciones_decision_MDM_clasificacion_binaria(X2,Y2);
precision22 =  funcion_evalua_precision_clasificador(X1,Y1,d1,d2,d12);

% Se observa que con MDM obtenemos un mejor resultado, y es el que usaremos

%% Representacion
[d1,d2,d12,coeficientes_d12] = funcion_calcula_funciones_decision_MDM_clasificacion_binaria(X1,Y1);
funcion_representa_muestras_clasificacion_binaria(X1,Y1)
hold on
x1min = min(X1(:,1));x1max = max(X1(:,1));
x2min = min(X1(:,2));x2max = max(X1(:,2));
axis([x1min x1max x2min x2max]);

A = coeficientes_d12(1); B = coeficientes_d12(2); C= coeficientes_d12(3);
x1Recta = x1min:0.01:x1max;
x2Recta = -(A*x1Recta+C)/(B+eps); % A*x1+B*x2+C = 0;
plot(x1Recta,x2Recta,'k');
hold off

[d1,d2,d12,coeficientes_d12] = funcion_calcula_funciones_decision_MDM_clasificacion_binaria(X2,Y2);
funcion_representa_muestras_clasificacion_binaria(X2,Y2)
hold on

x1min = min(X2(:,1));x1max = max(X2(:,1));
x2min = min(X2(:,2));x2max = max(X2(:,2));
x3min = min(X2(:,3));x3max = max(X2(:,3));
axis([x1min x1max x2min x2max x3min x3max]);

A = coeficientes_d12(1); B = coeficientes_d12(2); C= coeficientes_d12(3);D = coeficientes_d12(4);

Xmin = min(X2(:));
Xmax = max(X2(:));
paso = (Xmax-Xmin)/100;
[x1Plano, x2Plano] = meshgrid(Xmin:paso:Xmax);
x3Plano = -(A*x1Plano + B*x2Plano + D) / (C+eps);
surf(x1Plano,x2Plano,x3Plano);

hold off

%% c) Echo en el apartado anterior



